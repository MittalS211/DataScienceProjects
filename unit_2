{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn import linear_model\n",
    "%matplotlib inline\n",
    "pd.options.display.float_format = '{:.3f}'.format\n",
    "\n",
    "# Suppress annoying harmless error.\n",
    "import warnings\n",
    "warnings.filterwarnings(action=\"ignore\", module=\"scipy\", message=\"^internal gelsd\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "df= pd.read_csv('/Users/markespina/Downloads/NEW_YORK-Offenses_Known_to_Law_Enforcement_by_City_2013_13tbl8ny.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns= list(df.iloc[3])\n",
    "df= df.iloc[4:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns=['City', 'Population', 'Violent_crime',\n",
    "       'Murder_manslaughter',\n",
    "       'Rape_ver1', 'Rape_ver2',\n",
    "       'Robbery', 'Aggravated_assault', 'Property_crime', 'Burglary',\n",
    "       'Larceny_theft', 'auto_theft', 'Arson3']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df.drop(labels=\"Rape_ver1\", axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4                                          Adams Village\n",
       "5                               Addison Town and Village\n",
       "6                                          Akron Village\n",
       "7                                                 Albany\n",
       "8                                         Albion Village\n",
       "9                                         Alfred Village\n",
       "10                                      Allegany Village\n",
       "11                                          Amherst Town\n",
       "12                                    Amityville Village\n",
       "13                                             Amsterdam\n",
       "14                                        Arcade Village\n",
       "15                                       Ardsley Village\n",
       "16                                     Asharoken Village\n",
       "17                                        Attica Village\n",
       "18                                                Auburn\n",
       "19                                          Avon Village\n",
       "20                                 Baldwinsville Village\n",
       "21                                  Ballston Spa Village\n",
       "22                                               Batavia\n",
       "23                                          Bath Village\n",
       "24                                          Bedford Town\n",
       "25                                        Bethlehem Town\n",
       "26                                            Binghamton\n",
       "27                                           Black River\n",
       "28                                   Blooming Grove Town\n",
       "29                                       Bolivar Village\n",
       "30                                           Bolton Town\n",
       "31                                     Boonville Village\n",
       "32                                            Brant Town\n",
       "33                                              Brewster\n",
       "                             ...                        \n",
       "325                                                Utica\n",
       "326                                          Vestal Town\n",
       "327                                       Walden Village\n",
       "328                                        Wallkill Town\n",
       "329                                       Walton Village\n",
       "330                                       Warsaw Village\n",
       "331                              Washingtonville Village\n",
       "332                           Waterford Town and Village\n",
       "333                                     Waterloo Village\n",
       "334                                            Watertown\n",
       "335                                           Watervliet\n",
       "336                                 Watkins Glen Village\n",
       "337                                      Waverly Village\n",
       "338                             Webster Town and Village\n",
       "339                                    Weedsport Village\n",
       "340                                   Wellsville Village\n",
       "341                            Westhampton Beach Village\n",
       "342                                     West Seneca Town\n",
       "343                                    Whitehall Village\n",
       "344                                         White Plains\n",
       "345                                   Whitesboro Village\n",
       "346                                      Whitestown Town\n",
       "347                                        Woodbury Town\n",
       "348                                    Woodridge Village\n",
       "349                                       Woodstock Town\n",
       "350                                              Yonkers\n",
       "351                                        Yorktown Town\n",
       "352    1 The figures shown in this column for the off...\n",
       "353    2 The figures shown in this column for the off...\n",
       "354    3 The FBI does not publish arson data unless i...\n",
       "Name: City, Length: 351, dtype: object"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.City"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "df= df.reset_index().drop('index', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df[:348]\n",
    "df.Arson3.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Population</th>\n",
       "      <th>Violent_crime</th>\n",
       "      <th>Murder_manslaughter</th>\n",
       "      <th>Rape_ver2</th>\n",
       "      <th>Robbery</th>\n",
       "      <th>Aggravated_assault</th>\n",
       "      <th>Property_crime</th>\n",
       "      <th>Burglary</th>\n",
       "      <th>Larceny_theft</th>\n",
       "      <th>auto_theft</th>\n",
       "      <th>Arson3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Adams Village</td>\n",
       "      <td>1,861</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison Town and Village</td>\n",
       "      <td>2,577</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Akron Village</td>\n",
       "      <td>2,846</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albany</td>\n",
       "      <td>97,956</td>\n",
       "      <td>791</td>\n",
       "      <td>8</td>\n",
       "      <td>30</td>\n",
       "      <td>227</td>\n",
       "      <td>526</td>\n",
       "      <td>4,090</td>\n",
       "      <td>705</td>\n",
       "      <td>3,243</td>\n",
       "      <td>142</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion Village</td>\n",
       "      <td>6,388</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>223</td>\n",
       "      <td>53</td>\n",
       "      <td>165</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       City Population Violent_crime Murder_manslaughter  \\\n",
       "0             Adams Village      1,861             0                   0   \n",
       "1  Addison Town and Village      2,577             3                   0   \n",
       "2             Akron Village      2,846             3                   0   \n",
       "3                    Albany     97,956           791                   8   \n",
       "4            Albion Village      6,388            23                   0   \n",
       "\n",
       "  Rape_ver2 Robbery Aggravated_assault Property_crime Burglary Larceny_theft  \\\n",
       "0         0       0                  0             12        2            10   \n",
       "1         0       0                  3             24        3            20   \n",
       "2         0       0                  3             16        1            15   \n",
       "3        30     227                526          4,090      705         3,243   \n",
       "4         3       4                 16            223       53           165   \n",
       "\n",
       "  auto_theft Arson3  \n",
       "0          0      0  \n",
       "1          1      0  \n",
       "2          0      0  \n",
       "3        142      0  \n",
       "4          5      0  "
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: []"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Propertycrime=α+Population+Population2+Murder+Robbery\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Population\"]=df.Population.str.replace(',', \"\").astype(int)\n",
    "\n",
    "df['Population2']=df['Population']**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in ['Violent_crime', 'Murder_manslaughter','Rape_ver2', 'Robbery', 'Aggravated_assault', 'Property_crime'\\\n",
    "       , 'Burglary', 'Larceny_theft', 'auto_theft']:\n",
    "    df[col]= df[col].str.replace(',',\"\").astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"for col in ['']:\\n    df[col] =df[col].apply(lambda x: x if x==0 else 1)\""
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''for col in ['']:\n",
    "    df[col] =df[col].apply(lambda x: x if x==0 else 1)'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df[['Population','Population2','Violent_crime', 'Murder_manslaughter','Rape_ver2', 'Robbery', 'Aggravated_assault', 'Property_crime'\\\n",
    "       , 'Burglary', 'Larceny_theft', 'auto_theft']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Population</th>\n",
       "      <th>Population2</th>\n",
       "      <th>Violent_crime</th>\n",
       "      <th>Murder_manslaughter</th>\n",
       "      <th>Rape_ver2</th>\n",
       "      <th>Robbery</th>\n",
       "      <th>Aggravated_assault</th>\n",
       "      <th>Property_crime</th>\n",
       "      <th>Burglary</th>\n",
       "      <th>Larceny_theft</th>\n",
       "      <th>auto_theft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Population</th>\n",
       "      <td>1.000</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.987</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.971</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Population2</th>\n",
       "      <td>0.998</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.997</td>\n",
       "      <td>0.980</td>\n",
       "      <td>0.984</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.997</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.959</td>\n",
       "      <td>0.994</td>\n",
       "      <td>0.986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Violent_crime</th>\n",
       "      <td>0.999</td>\n",
       "      <td>0.997</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.992</td>\n",
       "      <td>0.995</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.978</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Murder_manslaughter</th>\n",
       "      <td>0.987</td>\n",
       "      <td>0.980</td>\n",
       "      <td>0.992</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.993</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.995</td>\n",
       "      <td>0.994</td>\n",
       "      <td>0.993</td>\n",
       "      <td>0.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rape_ver2</th>\n",
       "      <td>0.991</td>\n",
       "      <td>0.984</td>\n",
       "      <td>0.995</td>\n",
       "      <td>0.998</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.995</td>\n",
       "      <td>0.994</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.992</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Robbery</th>\n",
       "      <td>0.998</td>\n",
       "      <td>0.996</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.993</td>\n",
       "      <td>0.995</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.980</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aggravated_assault</th>\n",
       "      <td>0.999</td>\n",
       "      <td>0.997</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.994</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.976</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Property_crime</th>\n",
       "      <td>0.996</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.995</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.998</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.987</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burglary</th>\n",
       "      <td>0.971</td>\n",
       "      <td>0.959</td>\n",
       "      <td>0.978</td>\n",
       "      <td>0.994</td>\n",
       "      <td>0.992</td>\n",
       "      <td>0.980</td>\n",
       "      <td>0.976</td>\n",
       "      <td>0.987</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.983</td>\n",
       "      <td>0.991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Larceny_theft</th>\n",
       "      <td>0.998</td>\n",
       "      <td>0.994</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.993</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.999</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.983</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>auto_theft</th>\n",
       "      <td>0.992</td>\n",
       "      <td>0.986</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.997</td>\n",
       "      <td>0.995</td>\n",
       "      <td>0.998</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.997</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Population  Population2  Violent_crime  \\\n",
       "Population                1.000        0.998          0.999   \n",
       "Population2               0.998        1.000          0.997   \n",
       "Violent_crime             0.999        0.997          1.000   \n",
       "Murder_manslaughter       0.987        0.980          0.992   \n",
       "Rape_ver2                 0.991        0.984          0.995   \n",
       "Robbery                   0.998        0.996          1.000   \n",
       "Aggravated_assault        0.999        0.997          1.000   \n",
       "Property_crime            0.996        0.991          0.998   \n",
       "Burglary                  0.971        0.959          0.978   \n",
       "Larceny_theft             0.998        0.994          0.999   \n",
       "auto_theft                0.992        0.986          0.996   \n",
       "\n",
       "                     Murder_manslaughter  Rape_ver2  Robbery  \\\n",
       "Population                         0.987      0.991    0.998   \n",
       "Population2                        0.980      0.984    0.996   \n",
       "Violent_crime                      0.992      0.995    1.000   \n",
       "Murder_manslaughter                1.000      0.998    0.993   \n",
       "Rape_ver2                          0.998      1.000    0.995   \n",
       "Robbery                            0.993      0.995    1.000   \n",
       "Aggravated_assault                 0.991      0.994    1.000   \n",
       "Property_crime                     0.995      0.998    0.998   \n",
       "Burglary                           0.994      0.992    0.980   \n",
       "Larceny_theft                      0.993      0.996    0.999   \n",
       "auto_theft                         0.998      0.999    0.997   \n",
       "\n",
       "                     Aggravated_assault  Property_crime  Burglary  \\\n",
       "Population                        0.999           0.996     0.971   \n",
       "Population2                       0.997           0.991     0.959   \n",
       "Violent_crime                     1.000           0.998     0.978   \n",
       "Murder_manslaughter               0.991           0.995     0.994   \n",
       "Rape_ver2                         0.994           0.998     0.992   \n",
       "Robbery                           1.000           0.998     0.980   \n",
       "Aggravated_assault                1.000           0.998     0.976   \n",
       "Property_crime                    0.998           1.000     0.987   \n",
       "Burglary                          0.976           0.987     1.000   \n",
       "Larceny_theft                     0.999           1.000     0.983   \n",
       "auto_theft                        0.995           0.998     0.991   \n",
       "\n",
       "                     Larceny_theft  auto_theft  \n",
       "Population                   0.998       0.992  \n",
       "Population2                  0.994       0.986  \n",
       "Violent_crime                0.999       0.996  \n",
       "Murder_manslaughter          0.993       0.998  \n",
       "Rape_ver2                    0.996       0.999  \n",
       "Robbery                      0.999       0.997  \n",
       "Aggravated_assault           0.999       0.995  \n",
       "Property_crime               1.000       0.998  \n",
       "Burglary                     0.983       0.991  \n",
       "Larceny_theft                1.000       0.997  \n",
       "auto_theft                   0.997       1.000  "
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# vars are all Highly correlated, combined similar cimes via stardization\n",
    "df2.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "# group features for pca\n",
    "violent_crimes=['Violent_crime', 'Murder_manslaughter','Rape_ver2', 'Aggravated_assault']\n",
    "\n",
    "thefts=['Burglary', 'Larceny_theft', 'auto_theft']\n",
    "aggr_features=[[violent_crimes, 'violent_crime'], [thefts, 'theft']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reduce features\n",
    "for group in aggr_features:\n",
    "    means = df[group[0]].mean(axis=0)\n",
    "    stds = df[group[0]].std(axis=0)\n",
    "    df[group[1]]=((df[group[0]] - means) / stds).mean(axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Population</th>\n",
       "      <th>Violent_crime</th>\n",
       "      <th>Murder_manslaughter</th>\n",
       "      <th>Rape_ver2</th>\n",
       "      <th>Robbery</th>\n",
       "      <th>Aggravated_assault</th>\n",
       "      <th>Property_crime</th>\n",
       "      <th>Burglary</th>\n",
       "      <th>Larceny_theft</th>\n",
       "      <th>auto_theft</th>\n",
       "      <th>Arson3</th>\n",
       "      <th>Population2</th>\n",
       "      <th>violent_crime</th>\n",
       "      <th>theft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Adams Village</td>\n",
       "      <td>1861</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3463321</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison Town and Village</td>\n",
       "      <td>2577</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6640929</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Akron Village</td>\n",
       "      <td>2846</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8099716</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albany</td>\n",
       "      <td>97956</td>\n",
       "      <td>791</td>\n",
       "      <td>8</td>\n",
       "      <td>30</td>\n",
       "      <td>227</td>\n",
       "      <td>526</td>\n",
       "      <td>4090</td>\n",
       "      <td>705</td>\n",
       "      <td>3243</td>\n",
       "      <td>142</td>\n",
       "      <td>0</td>\n",
       "      <td>9595377936</td>\n",
       "      <td>0.299</td>\n",
       "      <td>0.435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion Village</td>\n",
       "      <td>6388</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>223</td>\n",
       "      <td>53</td>\n",
       "      <td>165</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>40806544</td>\n",
       "      <td>-0.065</td>\n",
       "      <td>-0.074</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       City  Population  Violent_crime  Murder_manslaughter  \\\n",
       "0             Adams Village        1861              0                    0   \n",
       "1  Addison Town and Village        2577              3                    0   \n",
       "2             Akron Village        2846              3                    0   \n",
       "3                    Albany       97956            791                    8   \n",
       "4            Albion Village        6388             23                    0   \n",
       "\n",
       "   Rape_ver2  Robbery  Aggravated_assault  Property_crime  Burglary  \\\n",
       "0          0        0                   0              12         2   \n",
       "1          0        0                   3              24         3   \n",
       "2          0        0                   3              16         1   \n",
       "3         30      227                 526            4090       705   \n",
       "4          3        4                  16             223        53   \n",
       "\n",
       "   Larceny_theft  auto_theft Arson3  Population2  violent_crime  theft  \n",
       "0             10           0      0      3463321         -0.081 -0.105  \n",
       "1             20           1      0      6640929         -0.081 -0.103  \n",
       "2             15           0      0      8099716         -0.081 -0.105  \n",
       "3           3243         142      0   9595377936          0.299  0.435  \n",
       "4            165           5      0     40806544         -0.065 -0.074  "
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "X= df[['Population' , 'Population2', 'violent_crime',\n",
    "       'theft']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.05012758e-01, -1.03300856e-01, -1.05110508e-01,  4.35480450e-01,\n",
       "       -7.43605163e-02, -1.00764038e-01, -1.05733519e-01,  9.25532263e-02,\n",
       "       -8.56602272e-02, -4.29021274e-02, -1.02512965e-01, -1.02520267e-01,\n",
       "       -1.06153728e-01, -1.05222415e-01, -1.58597129e-02, -1.02474595e-01,\n",
       "       -9.77842079e-02, -9.63956608e-02, -4.36402476e-02, -8.48274941e-02,\n",
       "       -8.77392973e-02, -6.45546033e-02,  2.22851330e-01, -1.04907706e-01,\n",
       "       -8.94854698e-02, -1.05432967e-01, -1.03766737e-01, -1.03361133e-01,\n",
       "       -1.00312314e-01, -1.04652378e-01, -1.05373139e-01,  7.74274640e-04,\n",
       "       -8.55692651e-02, -9.99295785e-02,  2.35486860e+00, -1.05163034e-01,\n",
       "       -9.94796467e-02, -1.02611163e-01, -7.30282789e-02, -6.68990586e-02,\n",
       "       -9.98706465e-02, -1.04704904e-01, -9.69058690e-02, -7.93515221e-02,\n",
       "       -1.04915008e-01, -9.86392295e-02, -1.06048675e-01, -9.94654904e-02,\n",
       "       -1.00899261e-01, -1.00080303e-01, -1.03038674e-01,  1.97676190e-01,\n",
       "       -1.02174940e-01, -9.86844534e-02, -6.77463963e-02,  2.54603688e-02,\n",
       "       -9.74078126e-02, -9.04981360e-02, -9.46444929e-02, -6.18783957e-02,\n",
       "        9.49894740e-02, -1.04802654e-01, -6.19181762e-02, -1.02640372e-01,\n",
       "       -1.00974142e-01, -5.51672896e-02, -9.53976654e-02, -9.94645942e-02,\n",
       "       -9.83017183e-02, -8.46964360e-02, -8.22663960e-02, -1.01588954e-01,\n",
       "       -6.94828935e-02, -1.03676289e-01, -3.32502079e-02, -1.05222863e-01,\n",
       "       -9.52464932e-02, -1.01484350e-01, -9.92115728e-02, -6.53469093e-02,\n",
       "       -9.04418925e-02, -9.26585592e-02, -8.74081921e-02, -7.01676574e-02,\n",
       "       -6.78449761e-02, -1.00013172e-01, -8.96754599e-02, -8.72720724e-02,\n",
       "       -1.02475492e-01, -8.45497450e-02, -7.48149955e-02,  2.67034013e-02,\n",
       "       -9.72658012e-02, -1.06206254e-01, -2.35380625e-02, -7.03987058e-02,\n",
       "       -9.71515882e-02, -7.69652953e-02, -7.92729902e-02, -8.82664166e-02,\n",
       "       -1.02408361e-01, -9.29033158e-02, -9.60859479e-02, -1.04577945e-01,\n",
       "       -8.73291459e-02,  4.63077935e-02, -1.03571237e-01, -5.23606048e-02,\n",
       "       -7.01882196e-02,  4.49926186e-03, -8.04199173e-02, -9.55945759e-02,\n",
       "       -6.59106060e-02, -1.05170337e-01, -9.91416874e-02, -1.05996149e-01,\n",
       "       -6.89809499e-02, -5.43571761e-02, -2.44480495e-02, -1.02281402e-01,\n",
       "       -9.98016573e-02, -1.02738122e-01, -1.01813663e-01,  1.52508180e-01,\n",
       "       -4.19445591e-02, -1.05898399e-01, -9.88027656e-02, -9.04447137e-02,\n",
       "       -1.02684700e-01, -1.01641929e-01, -5.54105190e-02,  1.25400491e-02,\n",
       "       -8.54879121e-02, -1.05425665e-01, -8.30334091e-02, -9.92252810e-02,\n",
       "       -5.27894598e-02,  1.01874822e-01, -7.12665396e-02, -1.01747429e-01,\n",
       "       -1.02828122e-01, -9.96367768e-02, -9.48344830e-02, -9.43238267e-02,\n",
       "       -8.73885261e-02, -9.36030661e-02, -1.04854732e-01, -8.00055341e-02,\n",
       "       -9.22967683e-02,  7.37707474e-02, -1.03819263e-01,  6.33400313e-02,\n",
       "       -1.45023658e-02, -6.99004795e-02, -8.03673250e-02, -9.04697570e-02,\n",
       "       -1.03413211e-01, -2.79563433e-02, -9.36099202e-02, -2.03962391e-02,\n",
       "       -9.86460836e-02, -1.00725668e-01, -7.97192710e-02, -5.70178167e-02,\n",
       "       -9.76787076e-02, -9.66130674e-02, -8.37947799e-02, -7.98794716e-02,\n",
       "       -9.31152788e-02, -1.01221720e-01, -1.04697602e-01, -9.15824136e-02,\n",
       "       -3.05844395e-02, -6.17003876e-02, -9.79623484e-02, -7.81759003e-02,\n",
       "       -8.40683637e-02, -9.93522398e-02, -8.52326502e-02, -1.03458435e-01,\n",
       "       -9.22602572e-02, -8.34810341e-02, -1.06258780e-01, -6.55822557e-02,\n",
       "       -1.04960232e-01, -8.60716568e-02, -6.87146686e-02, -9.07109289e-02,\n",
       "       -8.60195788e-02, -9.61778062e-02, -1.03405460e-01,  5.89486178e-03,\n",
       "       -9.18158351e-02, -9.27242791e-02, -1.02971544e-01, -5.49525055e-02,\n",
       "       -1.05470889e-01, -1.04088747e-01, -1.01957085e-01, -9.75074212e-02,\n",
       "       -9.85195729e-02, -8.43703263e-02,  1.80497476e-01, -6.53099501e-02,\n",
       "        9.07013204e-02,  3.04967310e-02, -9.66646972e-02, -3.86623187e-02,\n",
       "       -8.77329576e-02,  6.63708293e-02, -5.22236550e-02,  1.82150928e+01,\n",
       "       -9.71977083e-02,  3.57499474e-01, -5.49642380e-02, -6.64569434e-02,\n",
       "       -1.04756982e-01, -9.66715513e-02, -8.27789772e-02, -9.66784054e-02,\n",
       "       -9.37972216e-02, -2.72296246e-02, -7.91702449e-02, -6.01454835e-02,\n",
       "       -8.17549758e-02, -9.07593556e-02, -9.92681981e-02, -4.47502817e-02,\n",
       "       -5.55647615e-02, -6.55862887e-02, -6.61537026e-02, -6.74093330e-02,\n",
       "       -1.05117810e-01, -7.54649744e-02, -3.67831631e-02, -8.07048362e-02,\n",
       "       -1.05268086e-01, -1.04337222e-01, -9.93376354e-02, -1.00560788e-01,\n",
       "       -7.93460785e-02, -9.19062829e-02, -8.96777667e-02, -9.31897116e-02,\n",
       "       -9.59750041e-02, -1.03413659e-01, -1.03773143e-01, -9.12973623e-02,\n",
       "       -5.03783221e-02, -1.04795352e-01, -3.85654647e-02, -1.04630471e-01,\n",
       "       -6.83939360e-02, -1.05530717e-01, -8.71766293e-02,  2.27305665e-04,\n",
       "        1.10664977e-02, -9.99076057e-02, -9.87968077e-02, -9.93293707e-02,\n",
       "       -3.93267695e-02, -1.02835872e-01, -7.89454036e-02, -1.03278950e-01,\n",
       "        1.69601887e-02,  1.68930422e+00, -6.88613594e-02,  3.92731611e-03,\n",
       "       -9.81815474e-02, -1.36838551e-02, -9.73183273e-02, -9.65221715e-02,\n",
       "       -7.71339592e-02, -1.03308159e-01, -8.52755672e-02, -4.04874049e-02,\n",
       "       -7.38023956e-02, -8.37893364e-02,  3.95935567e-01, -9.19199248e-02,\n",
       "       -9.53305349e-02, -7.19676340e-02, -9.69949062e-02, -9.58996089e-02,\n",
       "       -1.03489502e-01, -1.03315909e-01, -1.00005356e-01, -8.77553123e-02,\n",
       "       -9.88941096e-02, -1.04382445e-01, -8.01480598e-02,  5.26509013e-02,\n",
       "       -9.41950754e-02, -9.34898155e-02, -6.51450697e-02, -5.63422136e-02,\n",
       "       -1.02219267e-01, -1.01327220e-01, -9.04547044e-02, -9.89470838e-02,\n",
       "        1.08688242e+00, -9.36917213e-02, -9.42406812e-02, -8.07770947e-02,\n",
       "        3.08505222e-02,  2.47877972e-01, -9.93974637e-02, -1.01491653e-01,\n",
       "       -9.35788526e-02, -7.40610593e-02,  2.28199946e-01, -5.72964621e-02,\n",
       "       -9.09292978e-02, -1.78394390e-02, -9.71456303e-02, -1.00622475e-01,\n",
       "       -1.00125527e-01, -1.00538881e-01, -8.74406040e-02,  4.02320614e-02,\n",
       "       -5.94434925e-02, -9.68003688e-02, -9.75567442e-02, -4.51146287e-02,\n",
       "       -1.03406357e-01, -8.54719633e-02, -1.00395011e-01,  7.38308348e-03,\n",
       "       -9.85341774e-02, -1.59344751e-03, -9.92841469e-02, -9.58909624e-02,\n",
       "       -7.27502804e-02, -1.02903003e-01, -9.92101623e-02,  3.45415876e-01,\n",
       "       -7.33141603e-02])"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.theft.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=df['Property_crime']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9652924829740417"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(X_train, y_train)\n",
    "lr.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.23431852e-03,  1.56382318e-10, -2.50986309e+03,  6.36403346e+03])"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = lr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "72.78679232739599"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22072.69980977698"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x114b2b550>"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test, y_pred-y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "def adj_r2(X, y, r2):\n",
    "    return 1 - (1-r2)*(len(y)-1)/(len(y)-X.shape[1]-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9635994333630193"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adj_r2(X_test, y_test, lr.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9652924829740417"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**import statsmodels.formula.api as sm result = sm.ols(formula=\"AverageNumberofTickets ~ NumberofEmployees + ValueofContract\", data=df).fit() #print result.summary() print result.rsquared, result.rsquared_adj # 0.877643371323 0.863248473832**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Looks fairly normally distributed\n",
    "predicted = lr.predict(X_test).ravel()\n",
    "actual = y_test\n",
    "\n",
    "# Calculate the error, also called the residual.\n",
    "residual = actual - predicted\n",
    "\n",
    "# This looks a bit concerning.\n",
    "plt.hist(residual)\n",
    "plt.title('Residual counts')\n",
    "plt.xlabel('Residual')\n",
    "plt.ylabel('Count')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.92407579, -0.31810449,  0.1070072 ,  0.95780046, -0.50173725,\n",
       "        0.92219207,  0.9610564 ,  0.62110638,  0.82901192,  0.98010325])"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "cross_val_score(lr, X_test, y_test, cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Population</th>\n",
       "      <th>Population2</th>\n",
       "      <th>violent_crime</th>\n",
       "      <th>theft</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1861</td>\n",
       "      <td>3463321</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2577</td>\n",
       "      <td>6640929</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2846</td>\n",
       "      <td>8099716</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>97956</td>\n",
       "      <td>9595377936</td>\n",
       "      <td>0.299</td>\n",
       "      <td>0.435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6388</td>\n",
       "      <td>40806544</td>\n",
       "      <td>-0.065</td>\n",
       "      <td>-0.074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4089</td>\n",
       "      <td>16719921</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1781</td>\n",
       "      <td>3171961</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>118296</td>\n",
       "      <td>13993943616</td>\n",
       "      <td>-0.019</td>\n",
       "      <td>0.093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9519</td>\n",
       "      <td>90611361</td>\n",
       "      <td>-0.072</td>\n",
       "      <td>-0.086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18182</td>\n",
       "      <td>330585124</td>\n",
       "      <td>-0.076</td>\n",
       "      <td>-0.043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2053</td>\n",
       "      <td>4214809</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>4523</td>\n",
       "      <td>20457529</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>658</td>\n",
       "      <td>432964</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2522</td>\n",
       "      <td>6360484</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>27270</td>\n",
       "      <td>743652900</td>\n",
       "      <td>0.031</td>\n",
       "      <td>-0.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>3333</td>\n",
       "      <td>11108889</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>7473</td>\n",
       "      <td>55845729</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5418</td>\n",
       "      <td>29354724</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>15374</td>\n",
       "      <td>236359876</td>\n",
       "      <td>-0.042</td>\n",
       "      <td>-0.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>5733</td>\n",
       "      <td>32867289</td>\n",
       "      <td>-0.074</td>\n",
       "      <td>-0.085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>17627</td>\n",
       "      <td>310711129</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>34243</td>\n",
       "      <td>1172583049</td>\n",
       "      <td>-0.079</td>\n",
       "      <td>-0.065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>46304</td>\n",
       "      <td>2144060416</td>\n",
       "      <td>0.087</td>\n",
       "      <td>0.223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1410</td>\n",
       "      <td>1988100</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>12001</td>\n",
       "      <td>144024001</td>\n",
       "      <td>-0.075</td>\n",
       "      <td>-0.089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1022</td>\n",
       "      <td>1044484</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2325</td>\n",
       "      <td>5405625</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2054</td>\n",
       "      <td>4218916</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2065</td>\n",
       "      <td>4264225</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2358</td>\n",
       "      <td>5560164</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>3642</td>\n",
       "      <td>13264164</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>319</th>\n",
       "      <td>615</td>\n",
       "      <td>378225</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>12195</td>\n",
       "      <td>148718025</td>\n",
       "      <td>-0.066</td>\n",
       "      <td>-0.074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321</th>\n",
       "      <td>61686</td>\n",
       "      <td>3805162596</td>\n",
       "      <td>0.191</td>\n",
       "      <td>0.228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>322</th>\n",
       "      <td>27980</td>\n",
       "      <td>782880400</td>\n",
       "      <td>-0.070</td>\n",
       "      <td>-0.057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>323</th>\n",
       "      <td>6887</td>\n",
       "      <td>47430769</td>\n",
       "      <td>-0.056</td>\n",
       "      <td>-0.091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>324</th>\n",
       "      <td>27940</td>\n",
       "      <td>780643600</td>\n",
       "      <td>-0.062</td>\n",
       "      <td>-0.018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>3012</td>\n",
       "      <td>9072144</td>\n",
       "      <td>-0.076</td>\n",
       "      <td>-0.097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>326</th>\n",
       "      <td>3453</td>\n",
       "      <td>11923209</td>\n",
       "      <td>-0.076</td>\n",
       "      <td>-0.101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327</th>\n",
       "      <td>5828</td>\n",
       "      <td>33965584</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328</th>\n",
       "      <td>8392</td>\n",
       "      <td>70425664</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>329</th>\n",
       "      <td>5175</td>\n",
       "      <td>26780625</td>\n",
       "      <td>-0.079</td>\n",
       "      <td>-0.087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>330</th>\n",
       "      <td>28179</td>\n",
       "      <td>794056041</td>\n",
       "      <td>-0.010</td>\n",
       "      <td>0.040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331</th>\n",
       "      <td>10245</td>\n",
       "      <td>104960025</td>\n",
       "      <td>-0.051</td>\n",
       "      <td>-0.059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>332</th>\n",
       "      <td>1862</td>\n",
       "      <td>3467044</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>333</th>\n",
       "      <td>4337</td>\n",
       "      <td>18809569</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>334</th>\n",
       "      <td>43777</td>\n",
       "      <td>1916425729</td>\n",
       "      <td>-0.069</td>\n",
       "      <td>-0.045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>335</th>\n",
       "      <td>1797</td>\n",
       "      <td>3229209</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>336</th>\n",
       "      <td>4574</td>\n",
       "      <td>20921476</td>\n",
       "      <td>-0.075</td>\n",
       "      <td>-0.085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>1732</td>\n",
       "      <td>2999824</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>338</th>\n",
       "      <td>44821</td>\n",
       "      <td>2008922041</td>\n",
       "      <td>-0.057</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>339</th>\n",
       "      <td>2604</td>\n",
       "      <td>6780816</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340</th>\n",
       "      <td>57559</td>\n",
       "      <td>3313038481</td>\n",
       "      <td>-0.042</td>\n",
       "      <td>-0.002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>341</th>\n",
       "      <td>3733</td>\n",
       "      <td>13935289</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>9141</td>\n",
       "      <td>83557881</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343</th>\n",
       "      <td>10685</td>\n",
       "      <td>114169225</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>344</th>\n",
       "      <td>829</td>\n",
       "      <td>687241</td>\n",
       "      <td>-0.080</td>\n",
       "      <td>-0.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>345</th>\n",
       "      <td>5931</td>\n",
       "      <td>35176761</td>\n",
       "      <td>-0.081</td>\n",
       "      <td>-0.099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346</th>\n",
       "      <td>199134</td>\n",
       "      <td>39654349956</td>\n",
       "      <td>0.286</td>\n",
       "      <td>0.345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>347</th>\n",
       "      <td>36643</td>\n",
       "      <td>1342709449</td>\n",
       "      <td>-0.078</td>\n",
       "      <td>-0.073</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>348 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Population  Population2  violent_crime  theft\n",
       "0          1861      3463321         -0.081 -0.105\n",
       "1          2577      6640929         -0.081 -0.103\n",
       "2          2846      8099716         -0.081 -0.105\n",
       "3         97956   9595377936          0.299  0.435\n",
       "4          6388     40806544         -0.065 -0.074\n",
       "5          4089     16719921         -0.081 -0.101\n",
       "6          1781      3171961         -0.081 -0.106\n",
       "7        118296  13993943616         -0.019  0.093\n",
       "8          9519     90611361         -0.072 -0.086\n",
       "9         18182    330585124         -0.076 -0.043\n",
       "10         2053      4214809         -0.081 -0.103\n",
       "11         4523     20457529         -0.081 -0.103\n",
       "12          658       432964         -0.081 -0.106\n",
       "13         2522      6360484         -0.081 -0.105\n",
       "14        27270    743652900          0.031 -0.016\n",
       "15         3333     11108889         -0.081 -0.102\n",
       "16         7473     55845729         -0.080 -0.098\n",
       "17         5418     29354724         -0.080 -0.096\n",
       "18        15374    236359876         -0.042 -0.044\n",
       "19         5733     32867289         -0.074 -0.085\n",
       "20        17627    310711129         -0.080 -0.088\n",
       "21        34243   1172583049         -0.079 -0.065\n",
       "22        46304   2144060416          0.087  0.223\n",
       "23         1410      1988100         -0.081 -0.105\n",
       "24        12001    144024001         -0.075 -0.089\n",
       "25         1022      1044484         -0.081 -0.105\n",
       "26         2325      5405625         -0.081 -0.104\n",
       "27         2054      4218916         -0.081 -0.103\n",
       "28         2065      4264225         -0.081 -0.100\n",
       "29         2358      5560164         -0.081 -0.105\n",
       "..          ...          ...            ...    ...\n",
       "318        3642     13264164         -0.081 -0.094\n",
       "319         615       378225         -0.081 -0.106\n",
       "320       12195    148718025         -0.066 -0.074\n",
       "321       61686   3805162596          0.191  0.228\n",
       "322       27980    782880400         -0.070 -0.057\n",
       "323        6887     47430769         -0.056 -0.091\n",
       "324       27940    780643600         -0.062 -0.018\n",
       "325        3012      9072144         -0.076 -0.097\n",
       "326        3453     11923209         -0.076 -0.101\n",
       "327        5828     33965584         -0.081 -0.100\n",
       "328        8392     70425664         -0.080 -0.101\n",
       "329        5175     26780625         -0.079 -0.087\n",
       "330       28179    794056041         -0.010  0.040\n",
       "331       10245    104960025         -0.051 -0.059\n",
       "332        1862      3467044         -0.080 -0.097\n",
       "333        4337     18809569         -0.080 -0.098\n",
       "334       43777   1916425729         -0.069 -0.045\n",
       "335        1797      3229209         -0.081 -0.103\n",
       "336        4574     20921476         -0.075 -0.085\n",
       "337        1732      2999824         -0.081 -0.100\n",
       "338       44821   2008922041         -0.057  0.007\n",
       "339        2604      6780816         -0.080 -0.099\n",
       "340       57559   3313038481         -0.042 -0.002\n",
       "341        3733     13935289         -0.080 -0.099\n",
       "342        9141     83557881         -0.081 -0.096\n",
       "343       10685    114169225         -0.081 -0.073\n",
       "344         829       687241         -0.080 -0.103\n",
       "345        5931     35176761         -0.081 -0.099\n",
       "346      199134  39654349956          0.286  0.345\n",
       "347       36643   1342709449         -0.078 -0.073\n",
       "\n",
       "[348 rows x 4 columns]"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
